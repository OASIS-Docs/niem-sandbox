name: Enterprise Markdown → HTML (± PDF) Converter

on:
  workflow_dispatch:
    inputs:
      sync_path:
        description: 'Path to directory containing the Markdown file (e.g., ndr/v6.0/psd01)'
        required: true
        type: string
      operation_mode:
        description: >-
          What to do. 
          - format_and_convert: run prettier + markdown→HTML
          - format_only: only prettier
          - convert_only: only markdown→HTML (no formatting)
          - format_convert_pdf: format, convert to HTML, then HTML→PDF (requires modify_date)
        required: true
        type: choice
        default: 'format_convert_pdf'
        options:
          - format_and_convert
          - format_only
          - convert_only
          - format_convert_pdf
      modify_date:
        description: 'Modification date for PDF footer / timestamps (yyyy-mm-dd). Required for PDF generation.'
        required: false
        type: string
        default: '2025-01-27'

env:
  PYTHONUNBUFFERED: '1'
  PIP_NO_CACHE_DIR: '0'  # allow pip caching (cached via actions/cache)

jobs:
  build:
    name: Format / Convert / PDF
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    outputs:
      html_generated: ${{ steps.convert_html.outcome == 'success' && 'true' || 'false' }}
      pdf_generated: ${{ steps.generate_pdf.outcome == 'success' && 'true' || 'false' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate & normalize inputs
        id: validate
        run: |
          set -euo pipefail

          # Trim whitespace/newlines
          SYNC_PATH="$(echo '${{ github.event.inputs.sync_path }}' | tr -d '\r\n' | xargs)"
          if [[ -z "$SYNC_PATH" ]]; then
            echo "::error::sync_path input is empty"
            exit 1
          fi

          if [[ ! -d "$SYNC_PATH" ]]; then
            echo "::error::Directory does not exist: $SYNC_PATH"
            echo "Available top-level dirs:"
            ls -1 | head -30
            exit 1
          fi

          # Find markdown file (first non-recursive)
          MD_FILE=$(find "$SYNC_PATH" -maxdepth 1 -type f -name '*.md' | head -n1)
          if [[ -z "$MD_FILE" ]]; then
            echo "::error::No Markdown file found in $SYNC_PATH"
            exit 1
          fi

          echo "Using Markdown file: $MD_FILE"

          # Export for downstream steps
          echo "SYNC_PATH=$SYNC_PATH" >> $GITHUB_ENV
          echo "MD_FILE=$MD_FILE" >> $GITHUB_ENV
          echo "OP_MODE=${{ github.event.inputs.operation_mode }}" >> $GITHUB_ENV
          echo "MODIFY_DATE=${{ github.event.inputs.modify_date }}" >> $GITHUB_ENV

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache repo Python deps (requirements.txt)
        uses: actions/cache@v3
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system-level dependencies
        run: |
          set -euo pipefail
          # Only install what we need. Use apt-get with minimal output.
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends pandoc bc
          # Dependencies for wkhtmltopdf (used in PDF generation)
          sudo apt-get install -y --no-install-recommends xfonts-75dpi fonts-liberation fonts-dejavu

      - name: Install patched wkhtmltopdf (only if PDF mode)
        if: contains(env.OP_MODE, 'pdf')
        run: |
          set -euo pipefail
          # Remove any stock version and install known patched build
          sudo apt-get remove -y wkhtmltopdf || true
          wget -qO /tmp/wkhtmltox.deb https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/wkhtmltox_0.12.6.1-2.jammy_amd64.deb
          sudo dpkg -i /tmp/wkhtmltox.deb || sudo apt-get install -f -y
          wkhtmltopdf --version

      - name: Setup and install Python virtualenv & deps
        run: |
          set -euo pipefail
          cd .github/src
          python3 -m venv venv
          # shellcheck source=/dev/null
          source venv/bin/activate
          pip install --upgrade pip
          if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
          else
            pip install beautifulsoup4 requests aiohttp aiofiles
          fi

      - name: Format Markdown with Prettier (if requested)
        if: env.OP_MODE == 'format_and_convert' || env.OP_MODE == 'format_only' || env.OP_MODE == 'format_convert_pdf'
        run: |
          set -euo pipefail
          # Use npx so we don't need global install
          npx prettier --write "$MD_FILE"

      - name: Convert Markdown to HTML (if requested)
        id: convert_html
        if: env.OP_MODE == 'format_and_convert' || env.OP_MODE == 'convert_only' || env.OP_MODE == 'format_convert_pdf'
        run: |
          set -euo pipefail
          cd .github/src
          source venv/bin/activate
          # Run the converter; ensure flags correspond
          CONVERT_ARGS=()
          if [[ "${{ env.OP_MODE }}" == "format_and_convert" || "${{ env.OP_MODE }}" == "format_convert_pdf" ]]; then
            CONVERT_ARGS+=("--md-format")
          fi
          if [[ "${{ env.OP_MODE }}" == "format_and_convert" || "${{ env.OP_MODE }}" == "convert_only" || "${{ env.OP_MODE }}" == "format_convert_pdf" ]]; then
            CONVERT_ARGS+=("--md-to-html")
          fi
          python3 step_1_markdown_to_html_converter_V3_0.py "$MD_FILE" "$(pwd)/../../" "$(dirname "$MD_FILE")" "${CONVERT_ARGS[@]}"
        working-directory: .github/src

      - name: Convert HTML to PDF (if in PDF mode)
        id: generate_pdf
        if: env.OP_MODE == 'format_convert_pdf'
        run: |
          set -euo pipefail
          if [[ -z "${{ env.MODIFY_DATE }}" ]]; then
            echo "::error::modify_date is required for PDF generation"
            exit 1
          fi
          # Validate date format (basic)
          if ! date -d "${{ env.MODIFY_DATE }}" '+%Y-%m-%d' >/dev/null 2>&1; then
            echo "::error::modify_date is not a valid yyyy-mm-dd date: ${{ env.MODIFY_DATE }}"
            exit 1
          fi

          # Locate generated HTML
          HTML_FILE=$(find "${{ env.SYNC_PATH }}" -maxdepth 3 -name '*.html' | head -n1)
          if [[ -z "$HTML_FILE" ]]; then
            echo "::error::No HTML file found to convert to PDF"
            exit 1
          fi

          cd .github/src
          source venv/bin/activate

          # Export MODIFY_DATE for the PDF script
          export MODIFY_DATE="${{ env.MODIFY_DATE }}"

          # Run PDF conversion
          python3 step_2_convert_html_to_pdf.py "$HTML_FILE" "${{ env.MODIFY_DATE }}"
        working-directory: .github/src

      - name: Configure git for commit
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Commit & push changes if any
        run: |
          set -euo pipefail
          # Stage changes: markdown, generated HTML/PDF, styles if updated
          git add -A "${{ env.SYNC_PATH }}/" || true
          git add -A .github/src/styles/ || true

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            OP="${{ env.OP_MODE }}"
            COMMIT_MSG="enterprise: ${OP} for ${{ env.SYNC_PATH }} - generated on $(date -u '+%Y-%m-%dT%H:%M:%SZ')"
            echo "Committing: $COMMIT_MSG"
            git commit -m "$COMMIT_MSG"
            git push
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: conversion-results-${{ github.run_number }}
          path: |
            ${{ env.SYNC_PATH }}/**/*.html
            ${{ env.SYNC_PATH }}/**/*.css
            ${{ env.SYNC_PATH }}/**/*.pdf
            .github/src/markdown_conversion.log
            conversion.log

      - name: Summary notices
        if: always()
        run: |
          echo "## ✅ Conversion summary" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Sync Path | \`${{ env.SYNC_PATH }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Mode | \`${{ env.OP_MODE }}\` |" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ env.OP_MODE }}" == "format_convert_pdf" ]]; then
            echo "| Modify Date | \`${{ env.MODIFY_DATE }}\` |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| HTML Generated | ${{ steps.convert_html.outcome }} |" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ env.OP_MODE }}" == "format_convert_pdf" ]]; then
            echo "| PDF Generated | ${{ steps.generate_pdf.outcome }} |" >> $GITHUB_STEP_SUMMARY
          fi
