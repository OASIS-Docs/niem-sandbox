
name: Enterprise Markdown to HTML Converter

on:
  workflow_dispatch:
    inputs:
      sync_path:
        description: 'Path to the directory with markdown files (e.g., ndr/v6.0/psd01).'
        required: true
        type: string
        default: 'ndr/v6.0/psd01'
      operation_mode:
        description: 'Select the conversion operation.'
        required: true
        type: choice
        default: 'format_and_convert'
        options:
          - 'format_and_convert'
          - 'format_only'
          - 'convert_only'
          - 'validate_only'
      enable_debug:
        description: 'Enable debug logging for troubleshooting.'
        required: false
        type: boolean
        default: false
      force_download_assets:
        description: 'Force re-download of external assets (e.g., stylesheets).'
        required: false
        type: boolean
        default: false

env:
  PYTHONUNBUFFERED: '1'
  PYTHONDONTWRITEBYTECODE: '1'
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  validate-and-convert:
    name: Validate, Build, and Convert
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install System and Language Dependencies
        run: |
          echo "::group::Installing Dependencies"
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends pandoc bc jq curl wget
          npm install -g prettier@latest
          echo "::endgroup::"

      - name: Validate Inputs and Paths
        id: validate
        run: |
          set -euo pipefail
          SYNC_PATH="${{ github.event.inputs.sync_path }}"
          echo "Validating path: $SYNC_PATH"
          if [[ -z "$SYNC_PATH" || ! -d "$SYNC_PATH" ]]; then
            echo "::error::Directory does not exist or path is invalid: $SYNC_PATH"
            exit 1
          fi

          MD_COUNT=$(find "$SYNC_PATH" -maxdepth 1 -name "*.md" | wc -l)
          if [[ $MD_COUNT -eq 0 ]]; then
            echo "::error::No markdown files found in: $SYNC_PATH"
            exit 1
          fi

          echo "Validation successful. Found $MD_COUNT markdown file(s)."
          echo "sync_path=$SYNC_PATH" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Execute Conversion Script
        id: convert
        env:
          SYNC_PATH: ${{ steps.validate.outputs.sync_path }}
          FORCE_DOWNLOAD: ${{ github.event.inputs.force_download_assets }}
          OPERATION_MODE: ${{ github.event.inputs.operation_mode }}
          ENABLE_DEBUG: ${{ github.event.inputs.enable_debug }}
        run: |
          set -euo pipefail
          chmod +x .github/scripts/step_1_format_md_and_convert_to_html_v3_0.sh

          # Set operation flags based on input
          MD_FORMAT_FLAG=""
          MD_CONVERT_FLAG=""
          case "$OPERATION_MODE" in
            "format_and_convert")
              MD_FORMAT_FLAG="--md-format"
              MD_CONVERT_FLAG="--md-to-html"
              ;;
            "format_only")
              MD_FORMAT_FLAG="--md-format"
              ;;
            "convert_only")
              MD_CONVERT_FLAG="--md-to-html"
              ;;
          esac
          
          # Set debug flag
          DEBUG_FLAG=""
          if [[ "$ENABLE_DEBUG" == "true" ]]; then
            DEBUG_FLAG="--debug"
          fi

          SCRIPT_ARGS=(
            "--sync-path" "$SYNC_PATH"
            $MD_FORMAT_FLAG
            $MD_CONVERT_FLAG
            $DEBUG_FLAG
          )

          echo "Executing conversion..."
          ./.github/scripts/step_1_format_md_and_convert_to_html_v3_0.sh "${SCRIPT_ARGS[@]}"
          echo "::notice::Conversion script finished."

      - name: Commit and Push Changes
        run: |
          set -euo pipefail
          SYNC_PATH="${{ steps.validate.outputs.sync_path }}"
          git add -A "$SYNC_PATH/"
          git add -A "styles/" 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "::notice::No changes detected. Nothing to commit."
          else
            COMMIT_MESSAGE="🚀 Enterprise conversion for $SYNC_PATH"
            git commit -m "$COMMIT_MESSAGE"
            git push
            echo "::notice::Changes committed and pushed successfully."
          fi

      - name: Upload Conversion Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: conversion-results-${{ github.run_id }}
          path: |
            ${{ steps.validate.outputs.sync_path }}/**/*.html
            ${{ steps.validate.outputs.sync_path }}/**/*.css
            conversion.log
          retention-days: 7

      - name: Write Job Summary
        if: always()
        run: |
          echo "## 🎯 Enterprise Conversion Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Path** | \`${{ steps.validate.outputs.sync_path }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Operation** | ${{ github.event.inputs.operation_mode }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ job.status }}" != "success" ]]; then
            echo "### ❌ Conversion failed" >> $GITHUB_STEP_SUMMARY
            echo "Review the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi

