name: Enterprise Markdown Follow-up Build

on:
  push:
    paths:
      - '.github/workflows/enterprise-markdown-convert.yml'

jobs:
  build:
    name: Build after Reflection Commit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Guard: only proceed for reflection commits
        run: |
          set -euo pipefail
          msg="${{ github.event.head_commit.message }}"
          if [[ ! "$msg" =~ ^chore:\ reflect\ runtime\ inputs ]]; then
            echo "Not a reflection commit; skipping." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

      - name: Avoid duplicate processing
        run: |
          set -euo pipefail
          MARKER=".github/workflow-data/run-${{ github.sha }}.done"
          if [ -f "$MARKER" ]; then
            echo "Commit already processed" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

      - name: Install yq (mikefarah)
        run: |
          set -euo pipefail
          if ! command -v yq >/dev/null; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi
          yq --version

      - name: Read reflected defaults
        id: readdefaults
        run: |
          set -euo pipefail
          FILE=".github/workflows/enterprise-markdown-convert.yml"
          if [ ! -f "$FILE" ]; then
            echo "::error::Missing reflected workflow file at $FILE"
            exit 1
          fi
          SYNC_PATH=$(yq e '.on.workflow_dispatch.inputs.sync_path.default' "$FILE")
          OP_MODE=$(yq e '.on.workflow_dispatch.inputs.operation_mode.default' "$FILE")
          MODIFY_DATE=$(yq e '.on.workflow_dispatch.inputs.modify_date.default' "$FILE")
          echo "SYNC_PATH=$SYNC_PATH" >> $GITHUB_ENV
          echo "OP_MODE=$OP_MODE" >> $GITHUB_ENV
          echo "MODIFY_DATE=$MODIFY_DATE" >> $GITHUB_ENV
          echo "Reflected inputs: sync_path=$SYNC_PATH operation_mode=$OP_MODE modify_date=$MODIFY_DATE" >> $GITHUB_STEP_SUMMARY

      - name: Validate inputs
        run: |
          set -euo pipefail
          if [ -z "${SYNC_PATH:-}" ]; then
            echo "::error::sync_path is empty"
            exit 1
          fi
          if [ ! -d "$SYNC_PATH" ]; then
            echo "::error::Directory does not exist: $SYNC_PATH"
            exit 1
          fi
          MD_FILE=$(find "$SYNC_PATH" -maxdepth 1 -type f -name '*.md' | head -n1)
          if [ -z "$MD_FILE" ]; then
            echo "::error::No Markdown file found in $SYNC_PATH"
            exit 1
          fi
          echo "MD_FILE=$MD_FILE" >> $GITHUB_ENV

          if [[ "$OP_MODE" == *pdf* ]]; then
            if [ -z "${MODIFY_DATE:-}" ]; then
              echo "::error::modify_date required for PDF generation"
              exit 1
            fi
            if ! date -d "$MODIFY_DATE" '+%Y-%m-%d' >/dev/null 2>&1; then
              echo "::error::modify_date is not a valid yyyy-mm-dd date: $MODIFY_DATE"
              exit 1
            fi
          fi

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache pip (fallback)
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system-level dependencies
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends pandoc bc wget ca-certificates
          sudo apt-get install -y --no-install-recommends xfonts-75dpi fonts-liberation fonts-dejavu

      - name: Install patched wkhtmltopdf if needed
        run: |
          set -euo pipefail
          if [[ "$OP_MODE" == *pdf* ]]; then
            sudo apt-get remove -y wkhtmltopdf || true
            TEMP_DEB=/tmp/wkhtmltox.deb
            wget -qO "$TEMP_DEB" https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/wkhtmltox_0.12.6.1-2.jammy_amd64.deb
            sudo dpkg -i "$TEMP_DEB" || sudo apt-get install -f -y
            wkhtmltopdf --version
          else
            echo "PDF not requested; skipping wkhtmltopdf install."
          fi

      - name: Setup and install Python virtualenv & deps
        run: |
          set -euo pipefail
          cd .github/src
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
          else
            pip install beautifulsoup4 requests aiohttp aiofiles
          fi

      - name: Format Markdown with Prettier (if requested)
        run: |
          set -euo pipefail
          if [[ "$OP_MODE" == "format_and_convert" || "$OP_MODE" == "format_only" || "$OP_MODE" == "format_convert_pdf" ]]; then
            npx prettier --write "$MD_FILE"
          else
            echo "Formatting skipped per operation mode: $OP_MODE"
          fi

      - name: Convert Markdown to HTML (if requested)
        id: convert_html
        working-directory: .github/src
        run: |
          set -euo pipefail
          if [[ "$OP_MODE" == "format_and_convert" || "$OP_MODE" == "convert_only" || "$OP_MODE" == "format_convert_pdf" ]]; then
            source venv/bin/activate
            CONVERT_ARGS=()
            if [[ "$OP_MODE" == "format_and_convert" || "$OP_MODE" == "format_convert_pdf" ]]; then
              CONVERT_ARGS+=(--md-format)
            fi
            if [[ "$OP_MODE" == "format_and_convert" || "$OP_MODE" == "convert_only" || "$OP_MODE" == "format_convert_pdf" ]]; then
              CONVERT_ARGS+=(--md-to-html)
            fi
            python3 step_1_markdown_to_html_converter_V3_0.py "$MD_FILE" "$(pwd)/../" "$(dirname "$MD_FILE")" "${CONVERT_ARGS[@]}"
          else
            echo "Markdown→HTML conversion skipped per operation mode: $OP_MODE"
          fi

      - name: Convert HTML to PDF (if in PDF mode)
        id: generate_pdf
        working-directory: .github/src
        run: |
          set -euo pipefail
          if [[ "$OP_MODE" == "format_convert_pdf" ]]; then
            HTML_FILE=$(find "${SYNC_PATH}" -maxdepth 3 -name '*.html' | head -n1)
            if [ -z "$HTML_FILE" ]; then
              echo "::error::No HTML file found to convert to PDF"
              exit 1
            fi
            source venv/bin/activate
            export MODIFY_DATE="$MODIFY_DATE"
            python3 step_2_convert_html_to_pdf.py "$HTML_FILE" "$MODIFY_DATE"
          else
            echo "PDF generation skipped per operation mode: $OP_MODE"
          fi

      - name: Configure git for commit
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Commit & push build outputs if any
        run: |
          set -euo pipefail
          git add -A "${SYNC_PATH}/" || true
          git add -A .github/src/styles/ || true
          if git diff --cached --quiet; then
            echo 'No changes to commit'
          else
            COMMIT_MSG="enterprise: ${OP_MODE} for ${SYNC_PATH} - generated on $(date -u '+%Y-%m-%dT%H:%M:%SZ')"
            git commit -m "$COMMIT_MSG"
            git push
          fi

      - name: Mark commit processed
        run: |
          set -euo pipefail
          mkdir -p .github/workflow-data
          MARKER=".github/workflow-data/run-${{ github.sha }}.done"
          touch "$MARKER"
          git add "$MARKER"
          git config user.name 'self-reflector[bot]'
          git config user.email 'self-reflector@users.noreply.github.com'
          if git diff --cached --quiet; then
            echo "No marker commit needed"
          else
            git commit -m "chore: mark ${{ github.sha }} processed" || true
            git push || true
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conversion-results-${{ github.run_number }}
          path: |
            ${SYNC_PATH}/**/*.html
            ${SYNC_PATH}/**/*.css
            ${SYNC_PATH}/**/*.pdf
            .github/src/markdown_conversion.log
            conversion.log

      - name: Summary
        if: always()
        run: |
          echo '## ✅ Conversion summary' >> $GITHUB_STEP_SUMMARY
          echo '| Field | Value |' >> $GITHUB_STEP_SUMMARY
          echo '|-------|-------|' >> $GITHUB_STEP_SUMMARY
          echo "| Sync Path | \`$SYNC_PATH\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Mode | \`$OP_MODE\` |" >> $GITHUB_STEP_SUMMARY
          if [[ "$OP_MODE" == 'format_convert_pdf' ]]; then
            echo "| Modify Date | \`$MODIFY_DATE\` |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| HTML Generated | ${{ steps.convert_html.outcome }} |" >> $GITHUB_STEP_SUMMARY
          if [[ "$OP_MODE" == 'format_convert_pdf' ]]; then
            echo "| PDF Generated | \`${{ steps.generate_pdf.outcome }}\` |" >> $GITHUB_STEP_SUMMARY
          fi
